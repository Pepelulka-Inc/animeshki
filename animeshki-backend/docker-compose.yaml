services:
  postgres:
    image: postgres
    container_name: animeshki-postgres
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    expose:
      - "5432"
    ports:
      - "15432:5432" # Временно прокинуто в целях дебага
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend-network

  minio-service:
    build:
      context: ./src/minio-service/
      dockerfile: Dockerfile
    depends_on:
      - minio
    container_name: minio-service
    environment:
      - MINIO_SERVICE_INIT_MODE
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
      - MINIO_SERVICE_USER_NAME
      - MINIO_SERVICE_USER_PASSWORD
      - MINIO_SERVICE_BUCKET_NAME
    expose:
      - "8000"
    ports:
      - "9005:8000" # Временно прокинуто в целях дебага
    networks:
      - backend-network
    restart: always

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD
    ports:
      - "9001:9001" # Временно прокинуто в целях дебага
    expose:
      - "9000"
    volumes:
      - minio-data:/data  # Точка монтирования для хранения данных
    networks:
      - backend-network
    command: [ "server", "/data", "--console-address", ":9001" ]
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    expose:
      - "2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    expose:
      - "9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=kafka:9092"]
      interval: 5s
      timeout: 5s   
      retries: 5   
    networks:
      - backend-network
      
  elasticsearch:
    image: elasticsearch:7.17.22
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - cluster.name=anime
      - node.name=anime
    expose:
      - "9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://elasticsearch:9200"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - backend-network

  es-service:
    build:
      context: ./src/es-service 
    container_name: es-service
    expose:
      - "8001"
    ports:
      - "7777:8001" # Временно прокинуто в целях дебага
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      - ES_URL=http://elasticsearch:9200
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
      - KAFKA_TOPIC=es-topic
    networks:
      - backend-network

  auth-service:
    build:
      context: ./src/animeshki
      dockerfile: auth.Dockerfile
    container_name: auth-service
    expose:
      - "9000"
    ports:
      - "1234:9000" # Временно прокинуто в целях дебага
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL
    networks:
      - backend-network
    restart: always

  main-service:
    build:
      context: ./src/animeshki
      dockerfile: Dockerfile
    container_name: main-animeshki-service
    expose:
      - "9002"
    ports:
      - "6666:9002" # Временно прокинуто в целях дебага
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL
    networks:
      - backend-network
    restart: always

networks:
  backend-network:
    name: backend-network

volumes:
  minio-data:
    driver: local
    name: minio-data
  postgres-data:
    driver: local
    name: postgres-data
